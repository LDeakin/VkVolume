#version 460
/* Copyright (c) 2019, Lachlan Deakin
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, r8ui) uniform uimage3D dist;
layout (binding = 1, r8ui) uniform uimage3D dist_swap; // occupancy_map on stage 0

layout(push_constant, std430) uniform PushConsts {
    uint stage;
};

// Based on [Saito and Toriwaki, 1994]
//    "New algorithms for euclidean distance transformation of an n-dimensional digitized picture with applications"
//    with modifications:
//      * runs on a GPU, uses a 3D swap image rather than a 1D buffer
//      * compute Chebyshev distance rather than Euclidean distance
//      * specific optimisations related to Chebyshev/GPU and sample reduction
//      * expects empty regions to have value 255 and occupied 0 in occupancy map

// call as:
//  pushConsts(0)
//  dispatch(rndUp(height, 8), rndUp(depth, 8));
//  pushConsts(1)
//  dispatch(rndUp(width, 8), rndUp(depth, 8));
//  pushConsts(2)
//  dispatch(rndUp(width, 8), rndUp(height, 8));

void main() {
    ivec3 pos;
    if (stage == 0) {
      pos = ivec3(0, gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    } else if (stage == 1) {
      pos = ivec3(gl_GlobalInvocationID.x, 0, gl_GlobalInvocationID.y);
    } else {
      pos = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 0);
    }

    const ivec3 dim = imageSize(dist);
    if(any(greaterThanEqual(pos, dim))) return;

    if (stage == 0) { // "Transformation 1"
        // Forward
        uint gi1jk = imageLoad(dist_swap, pos).x; // occupancy_to_max_dist
        for (pos.x = 1; pos.x < dim.x; ++pos.x) {
          uint gijk = min(gi1jk + 1, imageLoad(dist_swap, pos).x); // occupancy_to_max_dist
          imageStore(dist, pos, uvec4(gijk));
          gi1jk = gijk;
        }

        // Backward
        for (pos.x = dim.x - 2; pos.x >= 0; --pos.x) {
          uint gijk = min(gi1jk + 1, imageLoad(dist, pos).x);
          imageStore(dist, pos, uvec4(gijk));
          gi1jk = gijk;
        }
    } else if (stage == 1) { // "Transformation 2"
	      for (pos.y = 0; pos.y < dim.y; ++pos.y) {
		      uint D = imageLoad(dist, pos).x;
		
		      // Zig-zag out from pos in search of minimum D
		      for (int n = 1; n < D; ++n) {
			      if (pos.y >= n) {
				      uint D_n = imageLoad(dist,
					      ivec3(pos.x, pos.y - n, pos.z)).x;
				      D = min(D, max(n, D_n));
			      }
			      if ((pos.y + n) < dim.y && n < D) { // note early exit
				      uint D_n = imageLoad(dist,
					      ivec3(pos.x, pos.y + n, pos.z)).x;
				      D = min(D, max(n, D_n));
			      }
		      }
		      imageStore(dist_swap, pos, uvec4(D));	
	      }
    } else if (stage == 2) { // "Transformation 3"
        // same as transformation 2 but on the z axis
        for (pos.z = 0; pos.z < dim.z; ++pos.z) {
          uint gijk = imageLoad(dist_swap, pos).x;
          uint m_min = gijk;
          for (int n = 1; n < m_min; ++n) {
            if (pos.z >= n) {
              const uint gijnk = imageLoad(dist_swap, ivec3(pos.x, pos.y, pos.z - n)).x;
              m_min = min(m_min, max(n, gijnk));
            }
            if ((pos.z + n) < dim.z && n < m_min) { // note early exit possible
              const uint gijnk = imageLoad(dist_swap, ivec3(pos.x, pos.y, pos.z + n)).x;
              m_min = min(m_min, max(n, gijnk));
            }
          }
          imageStore(dist, pos, uvec4(m_min));
        }
    }
}
