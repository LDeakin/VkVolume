#version 460
/* Copyright (c) 2019, Lachlan Deakin
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#extension GL_GOOGLE_include_directive : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (set = 0, binding = 0, r8) uniform image3D volume; // r8 = float unorm

#define TRANSFER_FUNCTION_SET 0
#define TRANSFER_FUNCTION_BINDING_UNIFORM 1
#define TRANSFER_FUNCTION_BINDING_TEXTURE 2
#include "transfer_function.glsl"

#ifdef PRECOMPUTED_GRADIENT
#define GRADIENT_MAP_SET 0
#define GRADIENT_MAP_BINDING 3
#endif
#include "get_gradient_compute.glsl"

layout (set = 0, binding = 4, r8ui) uniform uimage3D occupancy_map;

layout(push_constant) uniform PushConsts {
    ivec4 block_size;
};

const uint OCCUPIED = 0;
const uint EMPTY = 255;

void main() {
  const ivec3 dim_occ = imageSize(occupancy_map);
  if(any(greaterThanEqual(gl_GlobalInvocationID, dim_occ))) return;

  ivec3 dim_vol = imageSize(volume);

  // Get block extents
  ivec3 start = ivec3(gl_GlobalInvocationID * block_size.xyz);
  ivec3 end = min(start + block_size.xyz, dim_vol);
  
  ivec3 dim_vol1 = imageSize(volume) - 1;

  ivec3 pos;
  for (pos.z = start.z; pos.z < end.z; ++pos.z)
    for (pos.y = start.y; pos.y < end.y; ++pos.y)
      for (pos.x = start.x; pos.x < end.x; ++pos.x) {
        float intensity = imageLoad(volume, pos).x;
        float gradient = get_gradient(pos, dim_vol1);
        float alpha = get_color(intensity, gradient).a;
        if (alpha > 0.0f) {
          // Set region as occupied
          imageStore(occupancy_map, ivec3(gl_GlobalInvocationID), ivec4(OCCUPIED));
          return;
        }
      }

  // Set region as empty
  imageStore(occupancy_map, ivec3(gl_GlobalInvocationID), ivec4(EMPTY));
}
